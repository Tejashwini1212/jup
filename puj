AES
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.Scanner;
public class p6 {
    public static void main(String[] args) throws Exception {
        String originalString = "NItteCollege";
        String key = "fhyujdh456yfhgn7";
        String encryptedString = encrypt(originalString, key);
        System.out.println("Encrypted: " + encryptedString);
        String decryptedString = decrypt(encryptedString, key);
        System.out.println("Decrypted: " + decryptedString);
    }

    public static String encrypt(String strToEncrypt, String secret) throws Exception {
        SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(strToEncrypt.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    public static String decrypt(String strToDecrypt, String secret) throws Exception {
        SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(strToDecrypt));
        return new String(decryptedBytes);
    }
}




RSA
import java.math.BigInteger; 
import java.util.Scanner; 
public class RSA { 
 public static void main(String args[]) { 
 Scanner scanner = new Scanner(System.in); 
 System.out.println("Enter the message to be encrypted:"); 
 BigInteger msg = scanner.nextBigInteger(); 
 System.out.println("Enter the first prime number (p):"); 
 BigInteger p = scanner.nextBigInteger(); 
 System.out.println("Enter the second prime number (q):"); 
 BigInteger q = scanner.nextBigInteger(); 
 BigInteger n = p.multiply(q); 
 BigInteger z = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE)); 
 System.out.println("the value of z = " + z); 
 BigInteger d = BigInteger.valueOf(2); 
 while (d.compareTo(z) < 0) { 
 if (gcd(d, z).equals(BigInteger.ONE)) { 
 break; 
 } 
 d = d.add(BigInteger.ONE); 
 } 
 System.out.println("the value of d = " + d); 
 BigInteger e = BigInteger.ZERO; 
 for (int i = 0; i <= 9; i++) { 
 BigInteger x = BigInteger.ONE.add(BigInteger.valueOf(i).multiply(z)); 
 if (x.mod(d).equals(BigInteger.ZERO)) { 
 e = x.divide(d); 
 break; 
 } 
 } 
 System.out.println("the value of e = " + e); 
 BigInteger c = msg.modPow(e, n); 
 System.out.println("Encrypted message is : " + c); 
 BigInteger msgBack = c.modPow(d, n); 
 System.out.println("Decrypted message is : " + msgBack); 
 scanner.close(); 
 } 
 static BigInteger gcd(BigInteger e, BigInteger z) { 
 if (e.equals(BigInteger.ZERO)) 
 return z; 
 else 
 return gcd(z.mod(e), e); 
 } 
}



HTML
<!DOCTYPE html>
<html>
  <head>
    <title>Diffie-Hellman Key Exchange</title>
  </head>
  <body>
    <h2>Diffie-Hellman Key Exchange</h2>
    <script>
      function power(a, b, p) {
        if (b === 0) return 1;
        let res = 1;
        a = a % p;
        while (b > 0) {
          if (b % 2 === 1) {
            res = (res * a) % p;
          }
          b = Math.floor(b / 2);
          a = (a * a) % p;
        }
        return res;
      }

      let P = parseInt(prompt("Enter a prime number P:"));
      document.write("The value of P: " + P + "<br>");

      let G = parseInt(prompt("Enter a primitive root G:"));
      document.write("The value of G: " + G + "<br>");

      let a = parseInt(prompt("Enter the private key for Alice (a):"));
      document.write("The private key (a) for Alice: " + a + "<br>");

      let b = parseInt(prompt("Enter the private key for Bob (b):"));
      document.write("The private key (b) for Bob: " + b + "<br>");

      let x = power(G, a, P);
      document.write("The public key (x) for Alice: " + x + "<br>");

      let y = power(G, b, P);
      document.write("The public key (y) for Bob: " + y + "<br>");

      let ka = power(y, a, P);
      let kb = power(x, b, P);

      document.write("Secret key for Alice is: " + ka + "<br>");
      document.write("Secret key for Bob is: " + kb + "<br>");
    </script>
  </body>
</html>



SHA-512
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class SHA {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the message to hash: ");
        String text = scanner.nextLine();
        scanner.close();

        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            byte[] hash = md.digest(text.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            System.out.println("Hashed message (SHA-512): " + hexString.toString());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("SHA-512 algorithm not found");
        }
    }
}




MD5
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class MD5Hash {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the message to hash: ");
        String message = scanner.nextLine();
        scanner.close();

        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(message.getBytes());
            byte[] hashBytes = md.digest();
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = String.format("%02x", b);
                hexString.append(hex);
            }
            System.out.println("Hashed message (MD5): " + hexString.toString());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("MD5 algorithm not found");
        }
    }
}




