//horspool
#include<stdio.h>
#include<string.h>
#include<conio.h>
#define MAX 500
int t[MAX];
void shifttable(char p[])
{
int i,j,m;
m=strlen(p);
for(i=0;i<MAX;i++)
t[i]=m;
for(j=0;j<m-1;j++)
t[p[j]]=m-1-j;
}

int horspool(char src[],char p[])
{
int i,j,k,m,n;
n=strlen(src);
m=strlen(p);
printf("\nLength of text=%d",n);
printf("\n Length of pattern=%d",m);
i=m-1;
while(i<n)
{
k=0;
while((k<m)&&(p[m-1-k]==src[i-k]))
k++;
if(k==m)
return(i-m+1);
else
i+=t[src[i]];
}
return -1;
}

void main()
{
char src[100],p[100];
int pos;
printf("Enter the text in which pattern is to be searched:\n");
gets(src);
printf("Enter the pattern to be searched:\n");
gets(p);
shifttable(p);
pos=horspool(src,p);
if(pos>=0)
printf("\n The desired pattern was found starting from position %d",pos+1);
else
printf("\n The pattern was not found in the given text");
getch();
}

//floyd
#include<stdio.h>
#include<time.h>
double clk;
clock_t starttime,endtime;
int min(int a,int b)
{
if(a<b)
return a;

else
return b;
}
void floyd(int n,int W[10][10],int D[10][10])
{
int i,j,k;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
D[i][j]=W[i][j];
for(k=0;k<n;k++)
{
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
D[i][j]=min(D[i][j],D[i][k]+D[k][j]);
}
}
}
}
void main()
{
int i,j,n,D[10][10],W[10][10];
printf("Enter no.of vertices: \n");
scanf("%d",&n);
printf("Enter the cost matrix: \n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&W[i][j]);
starttime=clock();
floyd(n,W,D);
endtime=clock();
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("All pair shortest path matrix is\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
printf("%d\t",D[i][j]);
}
}
printf("\nThe run time is %f\n",clk);}

//knapsack
main()
{
doubleclk;
clock_tstarttime,endtime;
int v[10][10],n,i,j,w[10],value[10],m,result;
printf("Enter the number of items:");
scanf("%d",&n);
printf("Enter the weights of %d items:/n",n);
for(i=1;i<=n;i++)
{
scanf("%d",&w[i]);
}
printf("Enter the value of %d items:",n);
for(i=1;i<=n;i++)
{
scanf("%d",&value[i]);
}

printf("Enter the capacity of the basket:");
scanf("%d",&m);
for(i=0;i<=n;i++)
{
for(j=0;j<=m;j++)
{
v[i][j]=0;
}
}
starttime=clock();
result=knap(n,w,value,m,v);
endtime=clock();
clk=(double)(endtime-starttime)/
CLOCKS_PER_SEC;
printf("Optimal solution for the knapsack
problem is %d\n",v[n][m]);
printf("%f\n",clk);
}

int max(intx,int y)
{
return((x>y)?x:y);
}

int knap(intn,int w[10],int value[10],intm,int v[10][10])
{
inti,j;
for(i=0;i<=n;i++)
for(j=0;j<=m;j++)
{
if(i==0||j==0)
v[i][j]=0;
else if(j<w[i])
v[i][j]=v[i-1][j];
else
v[i][j]=max(v[i-1][j],value[i]+v[i-1][j-w[i]]);
}
printf("\n The table for solving knapsack problem using dynamic programming is:\n");
for(i=0;i<=n;i++)
{
for(j=0;j<=m;j++)
{
printf("%d\t",v[i][j]);
}
printf("\n");
}
}

//dj
#include<stdio.h>
#include<time.h>
#define MAX 10
int choose(int dist[],int s[],int n)
{
int j=1,min=100,w;
for(w=1;w<=n;w++)
if((dist[w]<min) && (s[w]==0))
{
min=dist[w];
j=w;
}
return j;
}
void spath(int v,int cost[][MAX],int dist[],int n)
{
int w,u,i,num,s[MAX];
for(i=1;i<=n;i++)

{
s[i]=0;
dist[i]=cost[v][i];
}
s[v]=0;
dist[i]=999;
for(num=2;num<=n;num++)
{
u=choose(dist,s,n);
s[u]=1;
for(w=1;w<=n;w++)
if((dist[u]+cost[u][w])<dist[w] && !s[w])
dist[w]=dist[u]+cost[u][w];
}
}
void main()
{
int i,j,cost[MAX][MAX],dist[MAX],n,v;
double clk;
clock_t starttime,endtime;
printf("\nEnter number of vertices:");
scanf("%d",&n);
printf("\nEnter the cost of adjacency matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&cost[i][j]);
printf("\nEnter the source vertex");
scanf("%d",&v);
starttime=clock();
spath(v,cost,dist,n);
endtime=clock();
printf("\nShortest distance\n");
for(i=1;i<=n;i++)
printf("\n%d to %d = %d",v,i,dist[i]);
clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
printf("The time taken is %f\n",clk);}

//
//backtracking
#include<stdio.h>
#include<math.h>
#define FALSE 0
#define TRUE 1
int x[20];
int place(int k,int i)
{
int j;
for(j=1;j<=k;j++)
{
if((x[j]==i)||(abs(x[j]-i)==abs(j-k)))
return FALSE;
}
return TRUE;
}

void nqueens(int k,int n)
{
int i,a;
for(i=1;i<=n;i++)
{
if(place(k,i))
{
x[k]=i;
if(k==n)
{
for(a=1;a<=n;a++)
printf("%d\t",x[a]);
printf("\n");
}
else
nqueens(k+1,n);
}
}
}
//subset
#include<stdio.h>
int count,w[10],d,x[10];
void subset(int cs,int k,int r)
{
int i;
x[k]=1;
if((cs+w[k])==d)
{
printf("\n Subset solution = %d\n",++count);
for(i=0; i<=k; i++)
{
if(x[i]==1)
printf("%d\n",w[i]);
}
}

else if(cs+w[k]+w[k+1] <=d)
subset(cs+w[k],k+1,r-w[k]);
if((cs+r-w[k]>=d)&&(cs+w[k+1])<=d)
{
x[k]=0;
subset(cs,k+1,r-w[k]);
}
}
int main()
{
int sum=0,i,n;
printf("enter no of elements\n");
scanf("%d",&n);
printf("Enter the elements in ascending order\n");

for(i=0; i<n; i++)
scanf("%d",&w[i]);
printf("Enter the required sum\n");
scanf("%d",&d);
for(i=0; i<n; i++)
sum +=w[i];
if(sum < d)
{
printf("no solution exits\n");
}
printf("The solution is\n");
count =0;
subset(0,0,sum);
return 0;
getch();
}
